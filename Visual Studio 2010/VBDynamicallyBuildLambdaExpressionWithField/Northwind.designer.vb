'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.235
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Northwind")> _
Partial Public Class NorthwindDataContext
    Inherits System.Data.Linq.DataContext

    Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

#Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertOrder(instance As [Order])
    End Sub
    Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
    Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
#End Region

    Public Sub New()
        MyBase.New(Global.VBDynamicallyBuildLambdaExpressionWithField.My.MySettings.Default.NorthwindConnectionString, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
        Get
            Return Me.GetTable(Of [Order])()
        End Get
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Orders")> _
Partial Public Class [Order]
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _OrderID As Integer

    Private _CustomerID As String

    Private _EmployeeID As System.Nullable(Of Integer)

    Private _OrderDate As System.Nullable(Of Date)

    Private _RequiredDate As System.Nullable(Of Date)

    Private _ShippedDate As System.Nullable(Of Date)

    Private _ShipVia As System.Nullable(Of Integer)

    Private _Freight As System.Nullable(Of Decimal)

    Private _ShipName As String

    Private _ShipAddress As String

    Private _ShipCity As String

    Private _ShipRegion As String

    Private _ShipPostalCode As String

    Private _ShipCountry As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnEmployeeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIDChanged()
    End Sub
    Partial Private Sub OnOrderDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnOrderDateChanged()
    End Sub
    Partial Private Sub OnRequiredDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRequiredDateChanged()
    End Sub
    Partial Private Sub OnShippedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnShippedDateChanged()
    End Sub
    Partial Private Sub OnShipViaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnShipViaChanged()
    End Sub
    Partial Private Sub OnFreightChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFreightChanged()
    End Sub
    Partial Private Sub OnShipNameChanging(value As String)
    End Sub
    Partial Private Sub OnShipNameChanged()
    End Sub
    Partial Private Sub OnShipAddressChanging(value As String)
    End Sub
    Partial Private Sub OnShipAddressChanged()
    End Sub
    Partial Private Sub OnShipCityChanging(value As String)
    End Sub
    Partial Private Sub OnShipCityChanged()
    End Sub
    Partial Private Sub OnShipRegionChanging(value As String)
    End Sub
    Partial Private Sub OnShipRegionChanged()
    End Sub
    Partial Private Sub OnShipPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnShipPostalCodeChanged()
    End Sub
    Partial Private Sub OnShipCountryChanging(value As String)
    End Sub
    Partial Private Sub OnShipCountryChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
    Public Property OrderID() As Integer
        Get
            Return Me._OrderID
        End Get
        Set(value As Integer)
            If ((Me._OrderID = value) _
               = False) Then
                Me.OnOrderIDChanging(value)
                Me.SendPropertyChanging()
                Me._OrderID = value
                Me.SendPropertyChanged("OrderID")
                Me.OnOrderIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="NChar(5)")> _
    Public Property CustomerID() As String
        Get
            Return Me._CustomerID
        End Get
        Set(value As String)
            If (String.Equals(Me._CustomerID, value) = False) Then
                Me.OnCustomerIDChanging(value)
                Me.SendPropertyChanging()
                Me._CustomerID = value
                Me.SendPropertyChanged("CustomerID")
                Me.OnCustomerIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", DbType:="Int")> _
    Public Property EmployeeID() As System.Nullable(Of Integer)
        Get
            Return Me._EmployeeID
        End Get
        Set(value As System.Nullable(Of Integer))
            If (Me._EmployeeID.Equals(value) = False) Then
                Me.OnEmployeeIDChanging(value)
                Me.SendPropertyChanging()
                Me._EmployeeID = value
                Me.SendPropertyChanged("EmployeeID")
                Me.OnEmployeeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime")> _
    Public Property OrderDate() As System.Nullable(Of Date)
        Get
            Return Me._OrderDate
        End Get
        Set(value As System.Nullable(Of Date))
            If (Me._OrderDate.Equals(value) = False) Then
                Me.OnOrderDateChanging(value)
                Me.SendPropertyChanging()
                Me._OrderDate = value
                Me.SendPropertyChanged("OrderDate")
                Me.OnOrderDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredDate", DbType:="DateTime")> _
    Public Property RequiredDate() As System.Nullable(Of Date)
        Get
            Return Me._RequiredDate
        End Get
        Set(value As System.Nullable(Of Date))
            If (Me._RequiredDate.Equals(value) = False) Then
                Me.OnRequiredDateChanging(value)
                Me.SendPropertyChanging()
                Me._RequiredDate = value
                Me.SendPropertyChanged("RequiredDate")
                Me.OnRequiredDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippedDate", DbType:="DateTime")> _
    Public Property ShippedDate() As System.Nullable(Of Date)
        Get
            Return Me._ShippedDate
        End Get
        Set(value As System.Nullable(Of Date))
            If (Me._ShippedDate.Equals(value) = False) Then
                Me.OnShippedDateChanging(value)
                Me.SendPropertyChanging()
                Me._ShippedDate = value
                Me.SendPropertyChanged("ShippedDate")
                Me.OnShippedDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipVia", DbType:="Int")> _
    Public Property ShipVia() As System.Nullable(Of Integer)
        Get
            Return Me._ShipVia
        End Get
        Set(value As System.Nullable(Of Integer))
            If (Me._ShipVia.Equals(value) = False) Then
                Me.OnShipViaChanging(value)
                Me.SendPropertyChanging()
                Me._ShipVia = value
                Me.SendPropertyChanged("ShipVia")
                Me.OnShipViaChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Freight", DbType:="Money")> _
    Public Property Freight() As System.Nullable(Of Decimal)
        Get
            Return Me._Freight
        End Get
        Set(value As System.Nullable(Of Decimal))
            If (Me._Freight.Equals(value) = False) Then
                Me.OnFreightChanging(value)
                Me.SendPropertyChanging()
                Me._Freight = value
                Me.SendPropertyChanged("Freight")
                Me.OnFreightChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipName", DbType:="NVarChar(40)")> _
    Public Property ShipName() As String
        Get
            Return Me._ShipName
        End Get
        Set(value As String)
            If (String.Equals(Me._ShipName, value) = False) Then
                Me.OnShipNameChanging(value)
                Me.SendPropertyChanging()
                Me._ShipName = value
                Me.SendPropertyChanged("ShipName")
                Me.OnShipNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipAddress", DbType:="NVarChar(60)")> _
    Public Property ShipAddress() As String
        Get
            Return Me._ShipAddress
        End Get
        Set(value As String)
            If (String.Equals(Me._ShipAddress, value) = False) Then
                Me.OnShipAddressChanging(value)
                Me.SendPropertyChanging()
                Me._ShipAddress = value
                Me.SendPropertyChanged("ShipAddress")
                Me.OnShipAddressChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCity", DbType:="NVarChar(15)")> _
    Public Property ShipCity() As String
        Get
            Return Me._ShipCity
        End Get
        Set(value As String)
            If (String.Equals(Me._ShipCity, value) = False) Then
                Me.OnShipCityChanging(value)
                Me.SendPropertyChanging()
                Me._ShipCity = value
                Me.SendPropertyChanged("ShipCity")
                Me.OnShipCityChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipRegion", DbType:="NVarChar(15)")> _
    Public Property ShipRegion() As String
        Get
            Return Me._ShipRegion
        End Get
        Set(value As String)
            If (String.Equals(Me._ShipRegion, value) = False) Then
                Me.OnShipRegionChanging(value)
                Me.SendPropertyChanging()
                Me._ShipRegion = value
                Me.SendPropertyChanged("ShipRegion")
                Me.OnShipRegionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipPostalCode", DbType:="NVarChar(10)")> _
    Public Property ShipPostalCode() As String
        Get
            Return Me._ShipPostalCode
        End Get
        Set(value As String)
            If (String.Equals(Me._ShipPostalCode, value) = False) Then
                Me.OnShipPostalCodeChanging(value)
                Me.SendPropertyChanging()
                Me._ShipPostalCode = value
                Me.SendPropertyChanged("ShipPostalCode")
                Me.OnShipPostalCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCountry", DbType:="NVarChar(15)")> _
    Public Property ShipCountry() As String
        Get
            Return Me._ShipCountry
        End Get
        Set(value As String)
            If (String.Equals(Me._ShipCountry, value) = False) Then
                Me.OnShipCountryChanging(value)
                Me.SendPropertyChanging()
                Me._ShipCountry = value
                Me.SendPropertyChanged("ShipCountry")
                Me.OnShipCountryChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
           = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
           = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class
