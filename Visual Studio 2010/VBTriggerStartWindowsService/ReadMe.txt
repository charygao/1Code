=============================================================================
      WINDOWS SERVICE : VBTriggerStartWindowsService Project Overview
=============================================================================

/////////////////////////////////////////////////////////////////////////////
Summary:

Services and background processes have tremendous influence on the overall 
performance of the system. If we could just cut down on the total number of 
services, we would reduce the total power consumption and increase the 
overall stability of the system. The Windows 7 Service Control Manager has 
been extended so that a service can be automatically started and stopped when 
a specific system event, or trigger, occurs on the system. The new mechanism 
is called Service Trigger Event. A service can register to be started or 
stopped when a trigger event occurs. This eliminates the need for services to 
start when the system starts, or for services to poll or actively wait for an 
event; a service can start when it is needed, instead of starting 
automatically whether or not there is work to do. Examples of predefined 
trigger events include arrival of a device of a specified device interface 
class or availability of a particular firewall port. A service can also 
register for a custom trigger event generated by an Event Tracing for Windows 
(ETW) provider.

This VB.NET code sample shows how to create a trigger-start service that 
starts when a generic USB disk becomes available. The sample also shows how 
to create a trigger-start service that starts a service when the first IP 
address on the TCP/IP networking stack becomes available, and stops a service 
when the last IP address on the TCP/IP networking stack becomes unavailable. 
These start and stop events are reported in the Application log.


/////////////////////////////////////////////////////////////////////////////
Prerequisite:

Windows 7
http://www.microsoft.com/windows/windows-7/
You must run this code sample on a Windows Server 2008 R2 or Windows 7 or 
newer operating systems. Service trigger events are not supported until 
Windows Server 2008 R2 and Windows 7.


/////////////////////////////////////////////////////////////////////////////
Demo:

The following steps walk through a demonstration of the trigger start service 
sample that starts when a generic USB disk becomes available.

Step1. After you successfully build the sample project in Visual Studio 2010, 
you will get a service application: VBTriggerStartWindowsService.exe. 

Step2. Run Visual Studio 2010 Command Prompt as administrator, navigate to 
the output folder of the sample project, and enter the following command to 
install the service.

  InstallUtil.exe VBTriggerStartWindowsService.exe

The service is successfully installed if the process outputs:

  Beginning the Install phase of the installation.
  ......
  Installing service VBTriggerStartWindowsService...
  Service VBTriggerStartWindowsService has been successfully installed.
  Creating EventLog source VBTriggerStartWindowsService in log Application...
  Configuring trigger-start service...
  The Install phase completed successfully, and the Commit phase is beginning.
  ......
  The Commit phase completed successfully.
  The transacted install has completed.

If you do not see this output, please look for the 
VBTriggerStartWindowsService.InstallLog file in the ouput folder, and 
investigate the cause of failure.

Step3. Open Service Management Console (services.msc). You should be able to 
find "VBTriggerStartWindowsService Sample Service" in the service list. 

Step4. Plug in a generic USB disk to the computer, and refresh the service 
status in Service Management Console after a short while. You would find that 
VBTriggerStartWindowsService Sample Service is trigger-started. Open Event 
Viewer, and navigate to Windows Logs / Application. You should be able to see 
two events from VBTriggerStartWindowsService with event messages: 
"VBTriggerStartWindowsService is in OnStart." and "Service started successfully.".

Step5. To stop and uninstall the service, enter the following command in 
Visual Studio 2010 Command Prompt running as administrator.

  InstallUtil /u VBTriggerStartWindowsService.exe

If the service is successfully stopped and removed, you would see this output:

  The uninstall is beginning.
  ......
  Removing EventLog source VBTriggerStartWindowsService.
  Service VBTriggerStartWindowsService is being removed from the system...
  Service VBTriggerStartWindowsService was successfully removed from the system.
  The uninstall has completed.

------------------------

To demonstrate a trigger-start service that starts a service when the first 
IP address on the TCP/IP networking stack becomes available, and stops a 
service when the last IP address on the TCP/IP networking stack becomes 
unavailable. Please make these changes to step1 and step4 in the above demo.

Step1. In ProjectInstall.vb, comment out the codes:

	ServiceTriggerStart.SetServiceTriggerStartOnUSBArrival( _
	    ServiceInstaller1.ServiceName)

and uncomment the following codes:

	ServiceTriggerStart.SetServiceTriggerStartOnIPAddressArrival( _
	    ServiceInstaller1.ServiceName)

Then rebuild the sample project. 

...

Step4. Disconnect the computer from network. Make sure that the 
VBTriggerStartWindowsService service is stopped at the moment. Plug in your 
network cable and refresh the service status in Service Management Console 
after the network is connected. You should find that the service is 
trigger-started. Next, unplug the network cable from your computer. You 
would see that the service is trigger-stopped in the meantime the network is 
disconnected.

...


/////////////////////////////////////////////////////////////////////////////
Deployment:

A. Setup

Installutil.exe VBTriggerStartWindowsService.exe
It installs VBTriggerStartWindowsService.exe into SCM as a Windows Service. If 
the current operating system support trigger-start service, the command 
prompt outputs "Configuring trigger-start service...", otherwise, it prints 
"The current system does not support trigger-start service.".

B. Cleanup

Installutil.exe /u VBTriggerStartWindowsService.exe
It uninstalls VBTriggerStartWindowsService from SCM.


/////////////////////////////////////////////////////////////////////////////
Implementation:

A. Creating an ordinary Windows Service project

Step1. In Visual Studio 2010, add a new Visual Basic / Windows / Windows 
Service project named VBTriggerStartWindowsService.

Step2. Rename the default Service1 to the generic name "Service". Open the 
service in designer and set the ServiceName property to be 
VBTriggerStartWindowsService. 

Step3. Drag and drop an event log component from toolbox to the design view 
of the service, and set its Log property to be Application, and its Source to 
be VBTriggerStartWindowsService. The event log component will be used to log 
some application messages in the OnStart and OnStop functions of the service:

	Protected Overrides Sub OnStart(ByVal args() As String)
		' Add code here to start your service. This method should set things
		' in motion so your service can do its work.
		Me.EventLog1.WriteEntry("VBTriggerStartWindowsService is in OnStart.")
	End Sub


	Protected Overrides Sub OnStop()
		' Add code here to perform any tear-down necessary to stop your service.
		Me.EventLog1.WriteEntry("VBTriggerStartWindowsService is in OnStop.")
	End Sub

Step4. Right-click in the design view of the service, and select Add 
Installer on the context menu. This creates the project installer components: 

	ServiceProcessInstaller1
	ServiceInstaller1

Set the Account property of ServiceProcessInstaller1 to be Local Service, so 
the service will be run as Local Service. As for ServiceInstaller1, make its 
ServiceName property "VBTriggerStartWindowsService", and make its DisplayName 
"VBTriggerStartWindowsService Sample Service". Keep everything else the default 
value.

B. Adding P/Invoke signatures for native APIs and structs related to SCM

Add a NativeMethods.vb file and define P/Invoke signatures for native APIs 
like ChangeServiceConfig2, QueryServiceConfig2 and the related structs and 
enumerations.

C. Configuring the service to trigger-start when a generic USB disk becomes 
available (or trigger-start when the first IP address becomes available, and 
trigger-stop when the last IP address becomes unavailable.)

Services can be registered as trigger-start from the sc.exe command line 
utility (using the sc triggerinfo command and need to run the Command Shell 
as Administrator), or using the ChangeServiceConfig2 API programmatically. 
The service installer utility of .NET Windows Services (InstallUtil) does not 
support triggerinfo switch, so we do it programmatically. ServiceInstaller's  
AfterInstall event allows us to execute some codes after the serivce is 
installed. We are going to register the service as trigger-start in this 
event handler.

Step1. Add the helper class ServiceTriggerStart.vb to wrap and exposes some 
useful functions related to trigger start service.

  ServiceTriggerStart.IsSupported 
    Check whether the current system supports service trigger start. Service 
    trigger events are not supported until Windows Server 2008 R2 and Windows 
    7. Wndows Server 2008 R2 and Windows 7 have major version 6 and minor 
    version 1.

  ServiceTriggerStart.IsTriggerStartService
    Determine whether the specified service is configured to trigger start.
  
  ServiceTriggerStart.SetServiceTriggerStartOnUSBArrival
    Set the service to trigger-start when a generic USB disk becomes 
    available.
  
  ServiceTriggerStart.SetServiceTriggerStartOnIPAddressArrival
    Set the service to trigger-start when the first IP address on the TCP/IP 
    networking stack becomes available, and trigger-stop when the last IP 
    address on the TCP/IP networking stack becomes unavailable.

Take SetServiceTriggerStartOnUSBArrival as an example. The function modifies 
service configuration by calling the Win32 API ChangeServiceConfig2 to set 
service trigger start on USB arrival.

  1. Allocate a SERVICE_TRIGGER_SPECIFIC_DATA_ITEM structure
     a) Set its dwDataType member to SERVICE_TRIGGER_DATA_TYPE_STRING
     b) Set its cbData member to the length of the string L"USBSTOR\\GenDisk" 
        in bytes
     c) Set its pData member to that string.
  2. Allocate a SERVICE_TRIGGER structure
     a) Set its dwTriggerType member to 
        SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL
     b) Set its dwAction member to SERVICE_TRIGGER_ACTION_SERVICE_START
     c) Set its pTriggerSubtype member to the address of the 
        GUID_DEVINTERFACE_DISK GUID
     d) Set its cDataItems member to 1 and its pDataItems member to the 
        address of the structure allocated in the previous step.
  3. Allocate a SERVICE_TRIGGER_INFO structure
     a) Set its cTriggers member to 1 and its pTriggers member to the address 
        of the structure allocated in the previous step.
  4. Call the ChangeServiceConfig2 function with the 
     SERVICE_CONFIG_TRIGGER_INFO information level and pass to it the address 
     of the structure allocated in the previous step. 

Please note that the above data structures are initially allocated on managed 
heap. We need to marshal them to the native memory by calling 
Marshal.AllocHGlobal and Marshal.StructureToPtr, and free the native memory 
after use (Marshal.FreeHGlobal).

The complete code of setting service tigger start on USB arrival is:

	Dim pGuidUSBDevice As IntPtr = IntPtr.Zero
	Dim pUSBHardwareId As IntPtr = IntPtr.Zero
	Dim pDeviceData As IntPtr = IntPtr.Zero
	Dim pServiceTrigger As IntPtr = IntPtr.Zero
	Dim pServiceTriggerInfo As IntPtr = IntPtr.Zero

	Try
		' Marshal the Guid struct GUID_DEVINTERFACE_DISK to native memory

		pGuidUSBDevice = Marshal.AllocHGlobal(Marshal.SizeOf(GetType(Guid)))
		Marshal.StructureToPtr(GUID_DEVINTERFACE_DISK, pGuidUSBDevice, False)

		' Allocate and set the SERVICE_TRIGGER_SPECIFIC_DATA_ITEM structure

		Dim deviceData As SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
		deviceData.dwDataType = ServiceTriggerDataType.SERVICE_TRIGGER_DATA_TYPE_STRING
		deviceData.cbData = (USBHardwareId.Length + 1) * 2
		pUSBHardwareId = Marshal.StringToHGlobalUni(USBHardwareId)
		deviceData.pData = pUSBHardwareId

		' Marshal SERVICE_TRIGGER_SPECIFIC_DATA_ITEM to native memory

		pDeviceData = Marshal.AllocHGlobal( _
		Marshal.SizeOf(GetType(SERVICE_TRIGGER_SPECIFIC_DATA_ITEM)))
		Marshal.StructureToPtr(deviceData, pDeviceData, False)

		' Allocate and set the SERVICE_TRIGGER structure

		Dim serviceTrigger As New SERVICE_TRIGGER
		serviceTrigger.dwTriggerType = _
		ServiceTriggerType.SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL
		serviceTrigger.dwAction = _
		ServiceTriggerAction.SERVICE_TRIGGER_ACTION_SERVICE_START
		serviceTrigger.pTriggerSubtype = pGuidUSBDevice
		serviceTrigger.cDataItems = 1
		serviceTrigger.pDataItems = pDeviceData

		' Marshal the SERVICE_TRIGGER struct to native memory

		pServiceTrigger = Marshal.AllocHGlobal( _
		Marshal.SizeOf(GetType(SERVICE_TRIGGER)))
		Marshal.StructureToPtr(serviceTrigger, pServiceTrigger, False)

		' Allocate and set the SERVICE_TRIGGER_INFO structure

		Dim serviceTriggerInfo As New SERVICE_TRIGGER_INFO
		serviceTriggerInfo.cTriggers = 1
		serviceTriggerInfo.pTriggers = pServiceTrigger

		' Marshal the SERVICE_TRIGGER_INFO struct to native memory

		pServiceTriggerInfo = Marshal.AllocHGlobal( _
		Marshal.SizeOf(GetType(SERVICE_TRIGGER_INFO)))
		Marshal.StructureToPtr(serviceTriggerInfo, pServiceTriggerInfo, False)

		' Call ChangeServiceConfig2 with the SERVICE_CONFIG_TRIGGER_INFO level 
		' and pass to it the address of the SERVICE_TRIGGER_INFO structure

		If Not NativeMethods.ChangeServiceConfig2( _
		hService, ServiceConfig2InfoLevel.SERVICE_CONFIG_TRIGGER_INFO, _
		pServiceTriggerInfo) Then
			' If the handle is invalid, get the last Win32 error and throw a 
			' Win32Exception
			Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error)
		End If

	Finally
		' Clean up the native memory

		If (pGuidUSBDevice <> IntPtr.Zero) Then
			Marshal.FreeHGlobal(pGuidUSBDevice)
		End If
		If (pUSBHardwareId <> IntPtr.Zero) Then
			Marshal.FreeHGlobal(pUSBHardwareId)
		End If
		If (pDeviceData <> IntPtr.Zero) Then
			Marshal.FreeHGlobal(pDeviceData)
		End If
		If (pServiceTrigger <> IntPtr.Zero) Then
			Marshal.FreeHGlobal(pServiceTrigger)
		End If
		If (pServiceTriggerInfo <> IntPtr.Zero) Then
			Marshal.FreeHGlobal(pServiceTriggerInfo)
		End If
	End Try

Please note that, in the above code, the service handle (schService) must be 
opened or created with the SERVICE_CHANGE_CONFIG access permission:

	Dim schService As SafeServiceHandle = NativeMethods.OpenService( _
	    schSCManager, serviceName, ServiceAccessRights.SERVICE_CHANGE_CONFIG)

Step2. Add the AfterInstall event handler of ServiceInstaller1:

	Private Sub ServiceInstaller1_AfterInstall(ByVal sender As System.Object, _
	    ByVal e As System.Configuration.Install.InstallEventArgs) _
	Handles ServiceInstaller1.AfterInstall

	End Sub

In the event handler, determine if the current operating system supports 
service trigger events (ServiceTriggerStart.IsSupported), and configure the 
service to trigger start if applicable. 
(ServiceTriggerStart.SetServiceTriggerStartOnUSBArrival / 
ServiceTriggerStart.SetServiceTriggerStartOnIPAddressArrival)

	If (ServiceTriggerStart.IsSupported) Then
		ServiceTriggerStart.SetServiceTriggerStartOnUSBArrival( _
		    ServiceInstaller1.ServiceName)
		' [-or-]
		'ServiceTriggerStart.SetServiceTriggerStartOnIPAddressArrival( _
		'    ServiceInstaller1.ServiceName)
	End If


/////////////////////////////////////////////////////////////////////////////
References:

MSDN: Service Trigger Events
http://msdn.microsoft.com/en-us/library/dd405513(VS.85).aspx

Windows 7 Training Kit For Developers 
http://www.microsoft.com/downloads/details.aspx?familyid=1C333F06-FADB-4D93-9C80-402621C600E7&displaylang=en

KB: How to create a trigger-start Windows service in Windows 7
http://support.microsoft.com/kb/975425/en-us


/////////////////////////////////////////////////////////////////////////////