<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamicCondition</name>
    </assembly>
    <members>
        <member name="T:DynamicCondition.ConditionBuilder">
            <summary>
            Designer metadata
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionBuilder.SetDataSource``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Populates the dropdowns with the columns contained in dataSource.  dataSource can
            be either an IEnumerable(Of T) (for local), or an IQueryable(Of T) (for remote)
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionBuilder.GetCondition``1">
            <summary>
            Use this method to get a condition object which represents all the data the user
            has entered into the ConditionBuilder.
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionBuilder.GetConditionLine(System.String)">
            <summary>
            Takes in "ConditionLine2" and returns the actual instance of the control
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionBuilder.ConditionBuilder_Load(System.Object,System.EventArgs)">
            <summary>
            Execution when Loading ConditionBuilder 
            </summary>
        </member>
        <member name="P:DynamicCondition.ConditionBuilder.Lines">
            <summary>
            The number of ConditionLine controls to display
            </summary>
        </member>
        <member name="P:DynamicCondition.ConditionBuilder.OperatorType">
            <summary>
            Default operator (And/Or) to be used for each ConditionLine
            </summary>
        </member>
        <member name="T:DynamicCondition.ConditionBuilder.Compare">
            <summary>
            enum for definition of condition type
            </summary>
        </member>
        <member name="M:DynamicCondition.DynamicQuery.Where``1(System.Linq.IQueryable{``0},DynamicCondition.DynamicQuery.Condition{``0})">
            <summary>
            Filters an IQueryable(Of T) according to the specified condition
            </summary>
        </member>
        <member name="M:DynamicCondition.DynamicQuery.Where``1(System.Collections.Generic.IEnumerable{``0},DynamicCondition.DynamicQuery.Condition{``0})">
            <summary>
            Filters an IEnumerable(Of T) according to the specified condition
            </summary>
        </member>
        <member name="M:DynamicCondition.DynamicQuery.CreateCondition``2(System.Collections.Generic.IEnumerable{``0},System.String,DynamicCondition.DynamicQuery.Condition.Compare,``1)">
            <summary>
             Extension method that can be called off any type that implements IEnumerable(Of T), 
             which constructs a Condition with T as the element type and S as the value's type
            </summary>
        </member>
        <member name="M:DynamicCondition.DynamicQuery.Condition.Create``2(System.Collections.Generic.IEnumerable{``0},System.String,DynamicCondition.DynamicQuery.Condition.Compare,``1)">
            <summary>
            Constructs a Condition with T as the element type and S as the value's type
            </summary>
        </member>
        <member name="M:DynamicCondition.DynamicQuery.Condition.Create``1(System.Collections.Generic.IEnumerable{``0},System.String,DynamicCondition.DynamicQuery.Condition.Compare,System.Object,System.Type)">
            <summary>
            Constructs a Condition with T as the element type and valueType as the value's type
            This is useful for situations where you won't know the value's type until runtime.
            </summary>
        </member>
        <member name="M:DynamicCondition.DynamicQuery.Condition.Combine``1(DynamicCondition.DynamicQuery.Condition{``0},DynamicCondition.DynamicQuery.Condition.Compare,DynamicCondition.DynamicQuery.Condition{``0})">
            <summary>
            Creates a Condition which combines two other Conditions
            </summary>
            <typeparam name="T">The type the condition will execute against</typeparam>
            <param name="cond1">The first Condition</param>
            <param name="condType">The operator to use on the conditions</param>
            <param name="cond2">The second Condition</param>
            <returns>A new Condition which combines two Conditions into one according to the 
            specified operator</returns>
            <remarks></remarks>
        </member>
        <member name="M:DynamicCondition.DynamicQuery.Condition.Combine``1(DynamicCondition.DynamicQuery.Condition{``0},DynamicCondition.DynamicQuery.Condition.Compare,DynamicCondition.DynamicQuery.Condition{``0}[])">
            <summary>
            Combines multiple conditions according to the specified operator
            </summary>
        </member>
        <member name="M:DynamicCondition.DynamicQuery.Condition.CombineExpression(System.Linq.Expressions.Expression,DynamicCondition.DynamicQuery.Condition.Compare,System.Linq.Expressions.Expression)">
            <summary>
            Combines two Expressions according to the specified operator (condType)
            </summary>
        </member>
        <member name="M:DynamicCondition.DynamicQuery.Condition.CombineFunc``1(System.Func{``0,System.Boolean},DynamicCondition.DynamicQuery.Condition.Compare,System.Func{``0,System.Boolean})">
            <summary>
            Since both type parameters must be the same, we can turn what would normally
            be a Func(Of T, T, Boolean) into a Func(Of T, Boolean)
            </summary>
        </member>
        <member name="M:DynamicCondition.DynamicQuery.Condition.GetParamInstance(System.Type)">
            <summary>
            Guarantees that we get the same instance of a ParameterExpression for a given type t.
            </summary>
        </member>
        <member name="P:DynamicCondition.ConditionBuilderDesigner.ActionLists">
            <summary>
            override property for integrating PropertyGrid control
            </summary>
        </member>
        <member name="T:DynamicCondition.ConditionBuilderDesigner.ConditionBuilderActionList">
            <summary>
            Provides the base class for types that define a list of items used to create 
            a smart tag panel.
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionBuilderDesigner.ConditionBuilderActionList.GetPropertyByName(System.String)">
            <summary>
            Property Box
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionBuilderDesigner.ConditionBuilderActionList.GetSortedActionItems">
            <summary>
            Create the elements which will appear in the Smart Tag
            </summary>
        </member>
        <member name="P:DynamicCondition.ConditionBuilderDesigner.ConditionBuilderActionList.Lines">
            <summary>
            Property Lines
            </summary>
        </member>
        <member name="P:DynamicCondition.ConditionBuilderDesigner.ConditionBuilderActionList.OperatorType">
            <summary>
            Property OperatorType
            </summary>
        </member>
        <member name="T:DynamicCondition.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DynamicCondition.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DynamicCondition.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:SimulateVal.Val(System.Char)">
            <summary>
            Convert char into string
            </summary>
        </member>
        <member name="F:DynamicCondition.ConditionLine._dataType">
            <summary>
            property DataType
            </summary>
        </member>
        <member name="F:DynamicCondition.ConditionLine._dataSource">
            <summary>
            Property DataSource
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionLine.GetCondition``1(``0)">
            <summary>
            Returns a Condition(Of T) which represents the criteria stored in the UserControl
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionLine.GetSupportedTypes">
            <summary>
            contract behind the where keyword
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionLine.ConditionLine_Load(System.Object,System.EventArgs)">
            <summary>
            Combine condition 
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionLine.cboColumn_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            select which control to demonstrate when get property from the user picked 
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionLine.SetVisibility(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set which control is visible
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionLine.lblOperator_Click(System.Object,System.EventArgs)">
            <summary>
            Toggle between AND/OR
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionLine.MakeCond``2(``0,System.Type,``1)">
            <summary>
            MakeCond Operator
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionLine.CheckType``1(System.Type)">
            <summary>
            Returns true if propType is of type T or Nullable(Of T)
            </summary>
        </member>
        <member name="M:DynamicCondition.ConditionLine.MakeList``1(``0[])">
            <summary>
            Turns list of parameters into an IEnumerable(Of T) (where T is an anonymous type in this case)
            </summary>
        </member>
        <member name="P:DynamicCondition.ConditionLine.OperatorType">
            <summary>
            Condition compare operator
            </summary>
        </member>
    </members>
</doc>
