<#
'*********************************************************
'
'    Copyright (c) Microsoft. All rights reserved.
'    This code is licensed under the Microsoft Public License.
'    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
'    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
'    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
'    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
'
'*********************************************************
#>
<#@ template language="VB" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.VB.ttinclude"#><#@
 output extension=".vb"#><#

Dim code As New CodeGenerationTools(Me)
Dim ef As New MetadataTools(Me)
Dim loader As New MetadataLoader(Me)
Dim region As New CodeRegion(Me)

Dim inputFile As String = "POCOChangeTracking.edmx"
Dim ItemCollection As EdmItemCollection = loader.CreateEdmItemCollection(inputFile)
Dim namespaceName As String = code.VsNamespaceSuggestion()

Dim container As EntityContainer = ItemCollection.GetItems(Of EntityContainer)().FirstOrDefault()
If container Is Nothing Then
    Return "' No EntityContainer exists in the model, so no code was generated"
End If
#>
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Objects
Imports System.Data.EntityClient
<#
If Not String.IsNullOrEmpty(namespaceName) Then
#>
Namespace <#=code.EscapeNamespace(namespaceName)#>
<#
    PushIndent(CodeRegion.GetIndent(1))
End If
#>

Partial <#=Accessibility.ForType(container)#> Class <#=code.Escape(container)#>
    Inherits ObjectContext
    Public Const SettingsConnectionString As String = "name=<#=container.Name#>"
    Public Const ContainerName As String = "<#=container.Name#>"

<#
region.Begin("Constructors")
#>

    Public Sub New()
        MyBase.New(SettingsConnectionString, ContainerName)
<#
    WriteLazyLoadingEnabled(container)
#>
    End Sub

    Public Sub New(ByVal connectionString As String)
        MyBase.New(connectionString, ContainerName)
<#
    WriteLazyLoadingEnabled(container)
#>
    End Sub

    Public Sub New(ByVal connection As EntityConnection)
        MyBase.New(connection, ContainerName)
<#
    WriteLazyLoadingEnabled(container)
#>
    End Sub
<#
region.End()

region.Begin("ObjectSet Properties")

    For Each entitySet As EntitySet In container.BaseEntitySets.OfType(Of EntitySet)()
#>

    <#=Accessibility.ForReadOnlyProperty(entitySet)#> ReadOnly Property <#=code.Escape(entitySet)#>() As ObjectSet(Of <#=code.Escape(entitySet.ElementType)#>)
        Get
            If <#=code.FieldName(entitySet) #> Is Nothing Then
                <#=code.FieldName(entitySet)#> = CreateObjectSet(Of <#=code.Escape(entitySet.ElementType)#>)("<#=entitySet.Name#>")
            End If
            Return <#=code.FieldName(entitySet)#>
        End Get
    End Property
    Private <#=code.FieldName(entitySet)#> As ObjectSet(Of <#=code.Escape(entitySet.ElementType)#>)
<#
    Next

region.End()
region.Begin("Function Imports")


   For Each edmFunction As EdmFunction In container.FunctionImports
    Dim parameters As IEnumerable(Of FunctionImportParameter)  = FunctionImportParameter.Create(edmFunction.Parameters, code, ef)
        Dim paramList As String = String.Join(", ", parameters.Select(Function(p) "ByVal " & p.FunctionParameterName & " As " & p.FunctionParameterType).ToArray())
       If edmFunction.ReturnParameter Is Nothing Then
            Continue For
        End If
        Dim returnTypeElement As String = code.Escape(ef.GetElementType(edmFunction.ReturnParameter.TypeUsage))
#>
    <#=Accessibility.ForMethod(edmFunction)#> Function <#=code.Escape(edmFunction)#>(<#=paramList#>) As ObjectResult(Of <#=returnTypeElement #>)
<#
        For Each parameter As FunctionImportParameter In parameters
            If Not parameter.NeedsLocalVariable Then
                Continue For
            End If
#>

        Dim <#=parameter.LocalVariableName #> As ObjectParameter

        If <#=If(parameter.IsNullableOfT, parameter.FunctionParameterName & ".HasValue", parameter.FunctionParameterName & " IsNot Nothing")#> Then
            <#=parameter.LocalVariableName#> = New ObjectParameter("<#=parameter.EsqlParameterName#>", <#=parameter.FunctionParameterName #>)
        Else
            <#=parameter.LocalVariableName#> = New ObjectParameter("<#=parameter.EsqlParameterName#>", GetType(<#=parameter.RawClrTypeName #>))
        End If
<#
            Next
#>
        Return MyBase.ExecuteFunction(Of <#=returnTypeElement#>)("<#=edmFunction.Name#>"<#=code.StringBefore(", ", String.Join(", ", parameters.Select(Function(p) p.ExecuteParameterName).ToArray()))#>)
    End Function
<#
    Next

    region.End()
#>
End Class
<#
If Not String.IsNullOrEmpty(namespaceName) Then
    PopIndent()
#>
End Namespace
<#
End If
#>
<#+
Private Sub WriteLazyLoadingEnabled(ByVal container As EntityContainer)
    Dim lazyLoadingAttributeValue As String = Nothing
    Dim lazyLoadingAttributeName As String = MetadataConstants.EDM_ANNOTATION_09_02 & ":LazyLoadingEnabled"
    If MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, lazyLoadingAttributeValue) Then
        Dim isLazyLoading As Boolean = False
        If Boolean.TryParse(lazyLoadingAttributeValue, isLazyLoading) Then
#>
        MyBase.ContextOptions.LazyLoadingEnabled = <#=isLazyLoading.ToString(CultureInfo.InvariantCulture)#>
<#+
        End If
    End If
End Sub
#>
