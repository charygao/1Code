=============================================================================
    SERVICE APPLICATION : CppTriggerStartWindowsService Project Overview
=============================================================================

/////////////////////////////////////////////////////////////////////////////
Summary:

Services and background processes have tremendous influence on the overall 
performance of the system. If we could just cut down on the total number of 
services, we would reduce the total power consumption and increase the 
overall stability of the system. The Windows 7 Service Control Manager has 
been extended so that a service can be automatically started and stopped when 
a specific system event, or trigger, occurs on the system. The new mechanism 
is called Service Trigger Event. A service can register to be started or 
stopped when a trigger event occurs. This eliminates the need for services to 
start when the system starts, or for services to poll or actively wait for an 
event; a service can start when it is needed, instead of starting 
automatically whether or not there is work to do. Examples of predefined 
trigger events include arrival of a device of a specified device interface 
class or availability of a particular firewall port. A service can also 
register for a custom trigger event generated by an Event Tracing for Windows 
(ETW) provider.

This VC++ code sample shows how to create a trigger-start service that starts 
when a generic USB disk becomes available. The sample also shows how to 
create a trigger-start service that starts a service when the first IP 
address on the TCP/IP networking stack becomes available, and stops a service 
when the last IP address on the TCP/IP networking stack becomes unavailable. 
These start and stop events are reported in the Application log.


/////////////////////////////////////////////////////////////////////////////
Prerequisite:

Windows 7
http://www.microsoft.com/windows/windows-7/
You must run this code sample on a Windows Server 2008 R2 or Windows 7-based 
computer or newer operating systems. Service trigger events are not supported 
until Windows Server 2008 R2 and Windows 7.

Microsoft Windows SDK for Windows 7
http://www.microsoft.com/downloads/details.aspx?FamilyID=c17ba869-9671-4330-a63e-1fd44e0e2505&displaylang=en
To build the CppTriggerStartWindowsService project, you must have Microsoft 
Windows SDK for Windows 7 installed.


/////////////////////////////////////////////////////////////////////////////
Demo:

The following steps walk through the demonstration of a trigger start service 
that starts when a generic USB disk becomes available.

Step1. After you successfully build the sample project in Visual Studio 2008, 
you will get a service application: CppTriggerStartWindowsService.exe. 

Step2. Run a command prompt as administrator, navigate to the output folder 
of the sample project, and enter the following command to install the service.

  CppTriggerStartWindowsService.exe -install

The service is successfully installed if the process outputs:

  CppTriggerStartWindowsService Sample Service installed.
  Configuring service trigger start...

If you do not see this output, please look for error codes in the ouput, and 
investigate the cause of failure.

Step3. Open Service Management Console (services.msc). You should be able to 
find "CppTriggerStartWindowsService Sample Service" in the service list. You can 
verify the configuration of the service by entering the command below in a 
command prompt.

  CppTriggerStartWindowsService.exe -query

It should output:

  CppTriggerStartWindowsService Sample Service was installed.
  Service status: Stopped
  Is trigger-start: Yes

Step4. Plug in a generic USB disk to the computer, and refresh the service 
status in Service Management Console after a short while. You would find that 
CppTriggerStartWindowsService Sample Service is trigger-started. Open Event 
Viewer, and navigate to Windows Logs / Application. You should be able to see 
two events from CppTriggerStartWindowsService with event messages: "Enter 
SvcMain" and "Enter SvcInit".

Step5. To stop and uninstall the service, enter the following command in a 
command prompt running as administrator.

  CppTriggerStartWindowsService.exe -remove

If the service is successfully stopped and removed, you would see this output:

  Stopping CppTriggerStartWindowsService Sample Service.
  CppTriggerStartWindowsService Sample Service stopped.
  CppTriggerStartWindowsService Sample Service removed.

------------------------

To demonstrate a trigger-start service that starts a service when the first 
IP address on the TCP/IP networking stack becomes available, and stops a 
service when the last IP address on the TCP/IP networking stack becomes 
unavailable. Please make these changes to step1 and step4 in the above demo.

Step1. Replace the code line 

  #define SERVICE_TRIGGER_START_ON_USB

with 

  #define SERVICE_TRIGGER_START_ON_IP_ADDRESS

in Service.h, and rebuild the sample project. 

...

Step4. Disconnect the computer from network. Make sure that the 
CppTriggerStartWindowsService service is stopped at the moment. Plug in your 
network cable and refresh the service status in Service Management Console 
after the network is connected. You should find that the service is 
trigger-started. Next, unplug the network cable from your computer. You 
would see that the service is trigger-stopped in the meantime the network is 
disconnected.

...


/////////////////////////////////////////////////////////////////////////////
Deployment:

A. Setup

CppTriggerStartWindowsService.exe -install
It installs CppTriggerStartWindowsService.exe into SCM as a Windows Service. If 
the current operating system support trigger-start service, the command 
prompt outputs "Configuring trigger-start service...", otherwise, it prints 
"The current system does not support trigger-start service.".

B. Cleanup
CppTriggerStartWindowsService.exe -remove
It uninstalls CppTriggerStartWindowsService from SCM.


/////////////////////////////////////////////////////////////////////////////
Creation:

A. Creating an ordinary Windows Service project

Step1. In Visual Studio 2008, add a new Visual C++ / Win32 / Win32 Console 
Application project named CppTriggerStartWindowsService. Unselect the 
"Precompiled header" option in Application Settings of the Win32 Application 
Wizard, and delete stdafx.h, stdafx.cpp, targetver.h files after the project 
is created. 

Step2. Replace the main function with the code below. According to the 
arguments in the command line, the function installs or uninstalls or starts 
or queries the service by calling into different routines that will be 
declared and implemented in the next steps. 

	int wmain(int argc, wchar_t* argv[])
	{
		if ((argc > 1) && ((*argv[1] == L'-' || (*argv[1] == L'/'))))
		{
			if (_wcsicmp(L"install", argv[1] + 1) == 0)
			{
				SvcInstall();
			}
			else if (_wcsicmp(L"remove", argv[1] + 1) == 0)
			{
				SvcUninstall();
			}
			else if (_wcsicmp(L"query", argv[1] + 1) == 0)
			{
				SvcQueryConfig();
			}
		}
		else
		{
			_putws(L"Parameters:");
			_putws(L" -install    to install the service (require admin permission)");
			_putws(L" -remove     to remove the service (require admin permission)");
			_putws(L" -query      to query the configuration of the service");

			RunService();
		}

		return 0;
	}

Step3. Add the Service.h file to define the global settings of the Windows 
service:

  SERVICE_NAME:          Internal name of the service
  SERVICE_DISPLAY_NAME:  Displayed name of the service
  SERVICE_DEPENDENCIES:  List of service dependencies
  SERVICE_ACCOUNT:       The account under which the service should run
  SERVICE_PASSWORD:      The password to the service account name

In the file, declare the starting point of running the service: RunService.

Add the Service.cpp file to implement the skeleton of the Windows service. 
These functions can be reused by all Windows services:

  SvcMain            Entry point for the service
  SvcCtrlHandler     Service control handler
  SvcReportStatus    Report service status to SCM
  SvcReportEvent     Report an event to Windows event log

You can customize the service body by rewriting the SvcInit and SvcStop 
functions. They are called when the service is being started and when the 
service is to be stopped respectively. For example, you can create a named 
pipe and monitor the named pipe in SvcInit, and close the named pipe in 
SvcStop. In this sample, we just report the function call information to the 
Application log in the two functions to keep the sample simple.

Step4. Add the ServiceInstaller.h and ServiceInstaller.cpp files to declare 
and implement functions of installing, uninstalling, and querying the service.

  SvcInstall         Installs the service
  SvcUninstall       Uninstalls the service
  SvcQueryConfig     Query the service status and trigger-start configuration

------------------------

B. Configuring the service to trigger-start when a generic USB disk becomes 
available (or trigger-start when the first IP address becomes available, and 
trigger-stop when the last IP address becomes unavailable.)

Services can be registered as trigger-start from the sc.exe command line 
utility (using the sc triggerinfo command and need to run the Command Shell 
as Administrator), or using the ChangeServiceConfig2 API programmatically. 
The SvcInstall function in ServiceInstaller.h/cpp allows us to execute some 
codes to register the service as trigger-start while the service is intalled.

Step1. Add the ServiceTriggerStart.h and ServiceTriggerStart.cpp files. These 
files declare and implement functions to set and get the configuration of 
service trigger start.

  SupportServiceTriggerStart:
    Check whether the current system supports service trigger start. Service 
    trigger events are not supported until Windows Server 2008 R2 and Windows 
    7. Wndows Server 2008 R2 and Windows 7 have major version 6 and minor 
    version 1.
    
  GetServiceTriggerInfo
    Get the trigger-start configuration of a service.
  
  SetServiceTriggerStartOnUSBArrival
    Set the service to trigger-start when a generic USB disk is available.
  
  SetServiceTriggerStartOnIPAddressArrival
    Set the service to trigger-start when the first IP address on the TCP/IP 
    networking stack becomes available, and trigger-stop when the last IP 
    address on the TCP/IP networking stack becomes unavailable.

Take SetServiceTriggerStartOnUSBArrival as an example. The function modifies 
service configuration by calling the Win32 API ChangeServiceConfig2 to set 
service trigger start on USB arrival.

  1. Allocate a SERVICE_TRIGGER_SPECIFIC_DATA_ITEM structure
     a) Set its dwDataType member to SERVICE_TRIGGER_DATA_TYPE_STRING
     b) Set its cbData member to the length of the string L"USBSTOR\\GenDisk" 
        in bytes
     c) Set its pData member to that string.
  2. Allocate a SERVICE_TRIGGER structure
     a) Set its dwTriggerType member to 
        SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL
     b) Set its dwAction member to SERVICE_TRIGGER_ACTION_SERVICE_START
     c) Set its pTriggerSubtype member to the address of the 
        GUID_DEVINTERFACE_DISK GUID
     d) Set its cDataItems member to 1 and its pDataItems member to the 
        address of the structure allocated in the previous step.
  3. Allocate a SERVICE_TRIGGER_INFO structure
     a) Set its cTriggers member to 1 and its pTriggers member to the address 
        of the structure allocated in the previous step.
  4. Call the ChangeServiceConfig2 function with the 
     SERVICE_CONFIG_TRIGGER_INFO information level and pass to it the address 
     of the structure allocated in the previous step. 

The complete code of setting service tigger start on USB arrival is:

	// Hardware ID generated by the USB storage port driver
	LPCWSTR lpszDeviceData = L"USBSTOR\\GenDisk";

	// Allocate and set the SERVICE_TRIGGER_SPECIFIC_DATA_ITEM structure
	SERVICE_TRIGGER_SPECIFIC_DATA_ITEM deviceData = {0};
	deviceData.dwDataType = SERVICE_TRIGGER_DATA_TYPE_STRING;
	deviceData.cbData = (DWORD)((wcslen(lpszDeviceData)+1) * 
		sizeof(*lpszDeviceData));
	deviceData.pData = (PBYTE)lpszDeviceData;

	// Allocate and set the SERVICE_TRIGGER structure
	SERVICE_TRIGGER serviceTrigger = {0};
	serviceTrigger.dwTriggerType = 
		SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL;
	serviceTrigger.dwAction = SERVICE_TRIGGER_ACTION_SERVICE_START;
	serviceTrigger.pTriggerSubtype = const_cast<GUID*>(
		&GUID_DEVINTERFACE_DISK);
	serviceTrigger.cDataItems = 1;
	serviceTrigger.pDataItems = &deviceData;

	// Allocate and set the SERVICE_TRIGGER_INFO structure
	SERVICE_TRIGGER_INFO serviceTriggerInfo = {0};
	serviceTriggerInfo.cTriggers = 1;
	serviceTriggerInfo.pTriggers = &serviceTrigger;

	// Call ChangeServiceConfig2 with the SERVICE_CONFIG_TRIGGER_INFO level 
	// and pass to it the address of the SERVICE_TRIGGER_INFO structure
	return ChangeServiceConfig2(hService, SERVICE_CONFIG_TRIGGER_INFO, 
		&serviceTriggerInfo);

Step2. In the SvcInstall function of ServiceInstall.cpp, call 
SupportServiceTriggerStart and SetServiceTriggerStartOnUSBArrival / 
SetServiceTriggerStartOnIPAddressArrival to configure the service to trigger 
start if applicable.

	if (SupportServiceTriggerStart())
	{
		SetServiceTriggerStartOnUSBArrival(schService);
		// [-or-]
		SetServiceTriggerStartOnIPAddressArrival(schService);
	}

Please note that the service handle (schService) must be opened or created 
with the SERVICE_CHANGE_CONFIG access permission:

	SC_HANDLE schService = CreateService(
		schSCManager,                   // SCManager database
		SERVICE_NAME,                   // Name of service
		SERVICE_DISPLAY_NAME,           // Name to display
*		SERVICE_CHANGE_CONFIG,          // Desired access
		SERVICE_WIN32_OWN_PROCESS,      // Service type
		SERVICE_DEMAND_START,           // Start type
		SERVICE_ERROR_NORMAL,           // Error control type
		szPath,                         // Service's binary
		NULL,                           // No load ordering group
		NULL,                           // No tag identifier
		SERVICE_DEPENDENCIES,           // Dependencies
		SERVICE_ACCOUNT,                // Service running account
		SERVICE_PASSWORD);              // Password of the account

Step3. In the SvcQueryConfig function of ServiceInstall.cpp, query the 
service trigger start configuration.

	BOOL fIsTriggerStart;
	GetServiceTriggerInfo(schService, &fIsTriggerStart);

Please note that the service handle (schService) must be opened with the 
SERVICE_QUERY_CONFIG access permission:

	SC_HANDLE schService = OpenService(schSCManager, SERVICE_NAME, 
		SERVICE_QUERY_CONFIG);


/////////////////////////////////////////////////////////////////////////////
References:

MSDN: Service Trigger Events
http://msdn.microsoft.com/en-us/library/dd405513(VS.85).aspx

Windows 7 Training Kit For Developers 
http://www.microsoft.com/downloads/details.aspx?familyid=1C333F06-FADB-4D93-9C80-402621C600E7&displaylang=en

KB: How to create a trigger-start Windows service in Windows 7
http://support.microsoft.com/kb/975425/en-us


/////////////////////////////////////////////////////////////////////////////