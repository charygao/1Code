//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]

namespace AzureBingMaps.DAL
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class TravelModelContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new TravelModelContainer object using the connection string found in the 'TravelModelContainer' section of the application configuration file.
        /// </summary>
        public TravelModelContainer() : base("name=TravelModelContainer", "TravelModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TravelModelContainer object.
        /// </summary>
        public TravelModelContainer(string connectionString) : base(connectionString, "TravelModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TravelModelContainer object.
        /// </summary>
        public TravelModelContainer(EntityConnection connection) : base(connection, "TravelModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Travel> Travels
        {
            get
            {
                if ((_Travels == null))
                {
                    _Travels = base.CreateObjectSet<Travel>("Travels");
                }
                return _Travels;
            }
        }
        private ObjectSet<Travel> _Travels;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Travels EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTravels(Travel travel)
        {
            base.AddObject("Travels", travel);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="partitionKey">No Metadata Documentation available.</param>
        /// <param name="rowKey">No Metadata Documentation available.</param>
        public int DeleteFromTravel(global::System.String partitionKey, Nullable<global::System.Guid> rowKey)
        {
            ObjectParameter partitionKeyParameter;
            if (partitionKey != null)
            {
                partitionKeyParameter = new ObjectParameter("PartitionKey", partitionKey);
            }
            else
            {
                partitionKeyParameter = new ObjectParameter("PartitionKey", typeof(global::System.String));
            }
    
            ObjectParameter rowKeyParameter;
            if (rowKey.HasValue)
            {
                rowKeyParameter = new ObjectParameter("RowKey", rowKey);
            }
            else
            {
                rowKeyParameter = new ObjectParameter("RowKey", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteFromTravel", partitionKeyParameter, rowKeyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="partitionKey">No Metadata Documentation available.</param>
        /// <param name="place">No Metadata Documentation available.</param>
        /// <param name="geoLocation">No Metadata Documentation available.</param>
        /// <param name="time">No Metadata Documentation available.</param>
        public int InsertIntoTravel(global::System.String partitionKey, global::System.String place, global::System.String geoLocation, Nullable<global::System.DateTime> time)
        {
            ObjectParameter partitionKeyParameter;
            if (partitionKey != null)
            {
                partitionKeyParameter = new ObjectParameter("PartitionKey", partitionKey);
            }
            else
            {
                partitionKeyParameter = new ObjectParameter("PartitionKey", typeof(global::System.String));
            }
    
            ObjectParameter placeParameter;
            if (place != null)
            {
                placeParameter = new ObjectParameter("Place", place);
            }
            else
            {
                placeParameter = new ObjectParameter("Place", typeof(global::System.String));
            }
    
            ObjectParameter geoLocationParameter;
            if (geoLocation != null)
            {
                geoLocationParameter = new ObjectParameter("GeoLocation", geoLocation);
            }
            else
            {
                geoLocationParameter = new ObjectParameter("GeoLocation", typeof(global::System.String));
            }
    
            ObjectParameter timeParameter;
            if (time.HasValue)
            {
                timeParameter = new ObjectParameter("Time", time);
            }
            else
            {
                timeParameter = new ObjectParameter("Time", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("InsertIntoTravel", partitionKeyParameter, placeParameter, geoLocationParameter, timeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="partitionKey">No Metadata Documentation available.</param>
        /// <param name="rowKey">No Metadata Documentation available.</param>
        /// <param name="place">No Metadata Documentation available.</param>
        /// <param name="geoLocation">No Metadata Documentation available.</param>
        /// <param name="time">No Metadata Documentation available.</param>
        public int UpdateTravel(global::System.String partitionKey, Nullable<global::System.Guid> rowKey, global::System.String place, global::System.String geoLocation, Nullable<global::System.DateTime> time)
        {
            ObjectParameter partitionKeyParameter;
            if (partitionKey != null)
            {
                partitionKeyParameter = new ObjectParameter("PartitionKey", partitionKey);
            }
            else
            {
                partitionKeyParameter = new ObjectParameter("PartitionKey", typeof(global::System.String));
            }
    
            ObjectParameter rowKeyParameter;
            if (rowKey.HasValue)
            {
                rowKeyParameter = new ObjectParameter("RowKey", rowKey);
            }
            else
            {
                rowKeyParameter = new ObjectParameter("RowKey", typeof(global::System.Guid));
            }
    
            ObjectParameter placeParameter;
            if (place != null)
            {
                placeParameter = new ObjectParameter("Place", place);
            }
            else
            {
                placeParameter = new ObjectParameter("Place", typeof(global::System.String));
            }
    
            ObjectParameter geoLocationParameter;
            if (geoLocation != null)
            {
                geoLocationParameter = new ObjectParameter("GeoLocation", geoLocation);
            }
            else
            {
                geoLocationParameter = new ObjectParameter("GeoLocation", typeof(global::System.String));
            }
    
            ObjectParameter timeParameter;
            if (time.HasValue)
            {
                timeParameter = new ObjectParameter("Time", time);
            }
            else
            {
                timeParameter = new ObjectParameter("Time", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("UpdateTravel", partitionKeyParameter, rowKeyParameter, placeParameter, geoLocationParameter, timeParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TravelModel", Name="Travel")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Travel : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Travel object.
        /// </summary>
        /// <param name="partitionKey">Initial value of the PartitionKey property.</param>
        /// <param name="rowKey">Initial value of the RowKey property.</param>
        /// <param name="place">Initial value of the Place property.</param>
        /// <param name="time">Initial value of the Time property.</param>
        public static Travel CreateTravel(global::System.String partitionKey, global::System.Guid rowKey, global::System.String place, global::System.DateTime time)
        {
            Travel travel = new Travel();
            travel.PartitionKey = partitionKey;
            travel.RowKey = rowKey;
            travel.Place = place;
            travel.Time = time;
            return travel;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PartitionKey
        {
            get
            {
                return _PartitionKey;
            }
            set
            {
                if (_PartitionKey != value)
                {
                    OnPartitionKeyChanging(value);
                    ReportPropertyChanging("PartitionKey");
                    _PartitionKey = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("PartitionKey");
                    OnPartitionKeyChanged();
                }
            }
        }
        private global::System.String _PartitionKey;
        partial void OnPartitionKeyChanging(global::System.String value);
        partial void OnPartitionKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid RowKey
        {
            get
            {
                return _RowKey;
            }
            set
            {
                if (_RowKey != value)
                {
                    OnRowKeyChanging(value);
                    ReportPropertyChanging("RowKey");
                    _RowKey = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RowKey");
                    OnRowKeyChanged();
                }
            }
        }
        private global::System.Guid _RowKey;
        partial void OnRowKeyChanging(global::System.Guid value);
        partial void OnRowKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Place
        {
            get
            {
                return _Place;
            }
            set
            {
                OnPlaceChanging(value);
                ReportPropertyChanging("Place");
                _Place = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Place");
                OnPlaceChanged();
            }
        }
        private global::System.String _Place;
        partial void OnPlaceChanging(global::System.String value);
        partial void OnPlaceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] GeoLocation
        {
            get
            {
                return StructuralObject.GetValidValue(_GeoLocation);
            }
            set
            {
                OnGeoLocationChanging(value);
                ReportPropertyChanging("GeoLocation");
                _GeoLocation = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GeoLocation");
                OnGeoLocationChanged();
            }
        }
        private global::System.Byte[] _GeoLocation;
        partial void OnGeoLocationChanging(global::System.Byte[] value);
        partial void OnGeoLocationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Time
        {
            get
            {
                return _Time;
            }
            set
            {
                OnTimeChanging(value);
                ReportPropertyChanging("Time");
                _Time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Time");
                OnTimeChanged();
            }
        }
        private global::System.DateTime _Time;
        partial void OnTimeChanging(global::System.DateTime value);
        partial void OnTimeChanged();

        #endregion
    
    }

    #endregion
    
}
